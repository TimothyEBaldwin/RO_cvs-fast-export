#!/usr/bin/env python
#
# cvsreduce - skeletonize CVS master files
#
# Called as a filter, skeletonizes a CVS master presented on srandard input
# and write it to standard output. If an argument is specified, it must be
# the name of a directory containing CVS master files; in that case a
# correspondding directory of stripped files is created.
#
# Default behavior is to strip non-sticky tags, replace each version
# of content with a unique string including the revision ID, and
# replace log text with its MD5 hash in hex.
#
# The intent is to discard bulky content but preserve all metadata
# relevant to changeset merging. A collection of stripped files should
# imply the same changeset DAG as the unstripped originals, but be
# easier to pass around, faster to process, and not reveal potentially
# sensitive data.
#
import sys, getopt, hashlib

strip_tags = True
strip_logs = True
verbose = 0

def replace_escaped_text(input, replacement, output):
    leader = input.read(1)
    if leader != '@':
        sys.stderr.write("cvsreduce: fatal error, @ leader not where expected.\n")
        sys.exit(1)
    else:
        output.write('@' + replacement)
    while True:
        nxt = input.read(1)
        if nxt == '@':
            nxt2 = input.read(1)
            if nxt2 == '@':
                continue
            else:
                break
    if nxt2 == '\n':
        output.write("@\n")
    else:
        sys.stderr.write("cvsreduce: fatal error, @ trailer not followed by newline (%s).\n" % nxt2)
        sys.exit(1)
        
def hash_escaped_text(input, output):
    leader = input.read(1)
    if leader != '@':
        sys.stderr.write("cvsreduce: fatal error, @ leader not where expected.\n")
        sys.exit(1)
    txt = ""
    while True:
        nxt = input.read(1)
        if nxt == '@':
            nxt2 = input.read(1)
            if nxt2 == '@':
                txt += "@"
                continue
            else:
                break
        txt += nxt
    if nxt2 == '\n':
        m = hashlib.md5()
        m.update(txt)
        output.write("@%s\n@\n" % m.hexdigest())        
    else:
        sys.stderr.write("cvsreduce: fatal error, @ trailer not followed by newline (%s).\n" % nxt2)
        sys.exit(1)


def skeletonize(input, output):
    state = "ini"
    last_version = None
    deltacount = 0;
    while True:
        line = input.readline()
        if not line:
            break
        if verbose:
            sys.stderr.write("%s: %s\n" % (state, line.strip()))
        if state == 'ini':
            if line.startswith("symbols"):
                state = "sym"
            elif line[0].isdigit():
                last_version = line.strip()
            elif line.startswith("log"):
                if strip_logs:
                    output.write(line)
                    hash_escaped_text(input, output)
                    continue
            elif line.startswith("text"):
                output.write(line)
                txt = "text for %s\n" % last_version
                if deltacount > 0:
                    txt = "d1\na1\n" + txt
                deltacount += 1
                replace_escaped_text(input, txt, output)
                continue
        elif state == "sym":
            if not line[0] in (' ', '\t'):
                state = "ini"
            elif strip_tags and '0' not in line.split(":")[1]:
                continue
        output.write(line)

if __name__ == '__main__':
    (opts, arguments) = getopt.getopt(sys.argv[1:], "tlo:v")
    outdir = None
    for (opt, arg) in opts:
        if opt == '-t':
            strip_tags = False
        elif opt == '-l':
            strip_logs = False
        elif opt == '-o':
            outdir = arg
        elif opt == '-v':
            verbose += 1

    if not arguments:
        skeletonize(sys.stdin, sys.stdout)
        sys.exit(0)
    elif os.isdir(arguments[0]):
        sys.stderr.write("cvsreduce: argument must be a directory.\n")
        sys.exit(1)

    originals = arguments[0]
    if not outdir:
        outdir = originals + stripped
    if os.path.exists(outdir):
        sys.stderr.write("cvsreduce: refusing to step on %s.\n" % outdir)
        sys.exit(1)

    # Directory traversal

# end
