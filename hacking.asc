= Hacker's guide to cvs-fast-export =

cvs-fast-export is a complex program doing an intrinsically difficult
job.  Because analyzing CVS repositories has lots of strange edge
cases, it is likely to need modification in the future.  This document
is a collection of notes intended to make that less intimidating.

== History ==

This program was originally written as a one-off hack by Keith Packard
in early 2006, when he was working on migrating the X repositories
from CVS to git, and was not originally intended to survive that
conversion.  It was called "parsecvs" then.  It called git tools
directly to create translated repositories.

The code was briefly maintained by Bart Massey before passing to Eric
S. Raymond in late 2012. ESR wrote the fast-export output stage and
renamed the program to reflect its new function.

Most of ESR's original contributions are in export.c, which is why
that code is in a somewhat different style than the rest of the
codebase. ESR also split the original commit structure into
cvs_commit and git_commit as a space optimization, rescued 
the rather decrepit code for generating graphviz visualizations,
and hacked the parser code to be fully re-entrant.

A few other people have contributed significant improvements 
since, mainly performance tweaks.  Most notably: Jens Bethkowsky 
<jens.bethkowsky@rwth-aachen.de> added a red-black-tree implementation
to speed up symbol search; Aidan Hobson Sayers <aidanhs@cantab.net>
replaced an O(n**3) sort with an O(n log n) sort; David Leonard
<david.leonard@opengear.com> added Bloom filtering to speed up
compute_parent_links() and wrote several other significant speedups.

Large portions of this code remain a trackless jungle of complex 
algorithms with poorly documented assumptions.  Only Keith ever
completely understood it, and he does no longer.  Others have been
able to modify it mainly by isolating pieces that they could 
comprehend without having to grok the whole.

== Description ==

To understand this program, you need to understand the problem
it solves: lifting CVS repositories to git-compatible fast-import
streams.

What makes this problem difficult is that CVS records commits (and
tags) per-file, but what we want for the fast-import representation is
changesets - that is, coherent groups of per-file commits that capture
multiple per-file changes made with the same intention at the same
time.  The fundamental thing cvs-fast-export does is identify cliques
of per-file commits that should be coalesced into changesets.

To do this, it relies on the fact that the CVS command-line tools 
fake supporting changesets by replicating the comment that the user
supplied to "cvs commit" into every individual master file that the
commit alters.  

Under relatively recent implementations, CVS also embeds a common (and
unique) commit-ID field in each file commit of the group.  These
cliques can be unambiguously identified.  Groups committed by older
implementations that don't generate cimmit-IDs must be identified by
the fact that they have the same change comment, author, and commit
date.

Actually, commit-date comparison has to be fuzzy because each file
commit is actually done as a separate operation and may not complete
in the same clock second as the previous one (this is why
cvs-fast-export has the -w option).  Timestamp matching is further
complicated by clock-skew effects; for historical reasons, deltas are
committed with a timestamp generated on the client side rather than
the server.  Thus, clock drift between different client machines can
cause some odd effects, including child revisions with dates before
their parents.

But timestamp issues are actually the least part of the problem.  A
much bigger issue is per-file branch structures and tags that aren't
conformable with each other. The CVS tools have few safeguards against
creating such, and it is easy to end up with a situation where commit
cliques can be resolved but the right way to build them into a DAG of
parent-child links is unclear or ill-defined.  Inconsistent tagging
can cause interpretation problems as well.

Now you should read "RCS/CVS LIMITATIONS" in the cvs-fast-export(1)
manual page.

Below is a simple example of conformable branch structure involving
two files.

In this diagram, down is the arrow of time.  Each box on the left-hand
side represents a CVS file delta, each box on the right a changeset.
In each box the top line is a list of files modified and the bottom
line a change comment.  The branch labels at the bottom are HEAD
for the main branch in each CVS file and master for the main branch
in the gitspace DAG.

-----------------------------------------------------------------
 
 +--------------+                          +===============+
 |  foo.c 1.1   | +--------------+         | foo.c, bar.c  |
 | First commit | |   bar.c 1.1  |         | First commit  |
 +--------------+ | First commit |         +===============+
        |         +--------------+                |
        |                 |                       |
        |         +---------------+        +===============+
        |         |   bar.c 1.2   |        |    bar.c      |
        |         | Second commit |        | Second commit |
        |         +---------------+        +===============+
 +--------------+         |                       |
 |  foo.c 1.2   | +---------------+        +===============+
 | Third commit | |   bar.c 1.3   |        | foo.c, bar.c  |
 +--------------+ | Third commit  |        | Third commit  |
        |         +---------------+        +===============+
      HEAD                |                       |
                        HEAD                    master
-----------------------------------------------------------------

Here's an elaboration of that example, a conformant pair of CVS
masters with branching:

-------------------------------------------------------------------------
 
 +--------------+                             +===============+
 |  foo.c 1.1   | +--------------+            | foo.c, bar.c  |
 | First commit | |   bar.c 1.1  |            | First commit  |
 +--------------+ | First commit |            +===============+
        |         +--------------+                   |
        |                 |                          |
        |         +---------------+           +===============+
        |         |   bar.c 1.2   |           |    bar.c      |
        |         | Second commit |           | Second commit |
        |         +---------------+           +===============+
 +--------------+         |                          |
 |  foo.c 1.2   | +---------------+           +===============+
 | Third commit | |   bar.c 1.3   |           | foo.c, bar.c  |
 +--------------+ | Third commit  |           | Third commit  |
        |   \     +---------------+           +===============+
        |    \            |        \                 |   \
        |     \           |     +-------------+      |  +==============+
        | +-------------+ |     |bar.c 1.3.2.1|      |  | foo.c, bar.c |
        | |foo.c 1.2.2.1| |     |Fourth commit|      |  | Fourth commit|
        | |Fourth commit| |     +-------------+      |  +==============+
        | +-------------+ |           |              |          |
        |       |         |           |              |          |
      HEAD   alternate   HEAD       alternate      master     alternate
-------------------------------------------------------------------------

Note that the branch point and branch ID for 'alternate' are different 
in the two CVS masters, so cvs-fast-export cannot rely on them
matching to figure out the topology.

It also has to deal wth this case correctly:
-------------------------------------------------------------------------
 
 +--------------+                             +===============+
 |  foo.c 1.1   | +--------------+            | foo.c, bar.c  |
 | First commit | |   bar.c 1.1  |            | First commit  |
 +--------------+ | First commit |            +===============+
        |         +--------------+                   |
        |                 |                          |
        |         +---------------+           +===============+
        |         |   bar.c 1.2   |           |    bar.c      |
        |         | Second commit |           | Second commit |
        |         +---------------+           +===============+
 +--------------+         |                          |
 |  foo.c 1.2   | +---------------+           +===============+
 | Third commit | |   bar.c 1.3   |           | foo.c, bar.c  |
 +--------------+ | Third commit  |           | Third commit  |
        |   \     +---------------+           +===============+
        |    \            |        \                 |   \
        |     \           |         \                |  +==============+
        | +-------------+ |          \               |  |     foo.c    |
        | |foo.c 1.2.2.1| |           |              |  | Fourth commit|
        | |Fourth commit| |           |              |  +==============+
        | +-------------+ |           |              |         |
        |       |         |    +-------------+       |  +==============+
        | +-------------+ |    |bar.c 1.3.2.1|       |  | foo.c, bar.c |
        | |foo.c 1.2.2.2| |    |Fifth commit |       |  | Fifth commit |
        | |Fifth commit | |    +-------------+       |  +==============+
        | +-------------+ |           |              |         |
        |       |         |           |              |         |
        |       |         |           |              |         |
      HEAD   alternate   HEAD       alternate      master  alternate
-------------------------------------------------------------------------

That is, after any branch there may be a delta that *doesn't* make 
a changeset with any delta on matching branches.

The previous diagrams elide some important details, which is how tags and
branches are actually represented in CVS.  First: there are no
per-changeset tags, only per-file ones.  When CVS fakes tagging a
changeset, what it actually does is add the same tag symbol to 
every file master in the changeset.

Named CVS branches are represented by tagging the branch tip revision - in
every file - with the branch name. Branch names, are, however, not
static; the branch symbol is updated to point to the new branch tip
after a commit.

How CVS itself distinguishes between tag names (static) and branch
names (dynamic) is unclear, and may vary by version and
implementation.  There are hints that it may be done by putting a
synthetic tag symbol with a name derived from the branch name at the
branch root (some CVS manuals advise doing this manually).  See
"Known problems" for cvs-fast-export issues related to this.

== Operation ==

This program operates in three stages.  The first (analysis) digests a
collection of RCS masters into a collection of linked lists and
structures representing per-file revision trees.  The second
(resolution) massages the revision trees into a DAG (directed acyclic
graph) of changesets.  The third stage (export) emits a report on the
DAG structure, either a fast-export stream expressing it or DOT code
for a visualization that can be rendered by graphviz.

The main sequence of the code is, unsurprisingly, in the main() portion
of the file main.c

=== Analysis stage ===

The main function of this stage is rev_list_file().

It may be sequenced in one of two ways depending on whether you run
with the -t option at a value 2 or greater.  Without this, masters are
processed sequentially as they are encountered.  With it, they are
dispatched to worker subthreads.  The point of this is to avoid
allowing I/O waits for one master read or snapshot export to stall
compute-intensive processing of other masters (that is, mainly, delta
assembly).

CVS master files consist of a header section describing symbols and
attributes, followed by a set of deltas (add-delete/change
sequences) one per revision number.

The analysis stage uses a yacc/lex grammar to parse headers in CVS
files, and custom code to integrate their delta sequences into
sequences of whole-file snaphots corresponding to each delta. These
snapshots are stashed in a temporary directory, later to become blobs
in the fast-export stream.

A consequence is that the code is tied to Bison and Flex.  In order
for the parallelization to work, the CVS-master parser has to be fully
re-entrant.  Heirloom Yacc and Lex can't do that.

After some study of the structures in cvs.h, most of the analysis code
will be fairly straightforward to understand.

If you have to modify the analysis code, it will most likely involve some
small addition to the parse grammar to handle an attribute particular 
to somebody's variation on CVS.

=== Resolution stage ===

The main function of this stage is rev_list_merge().  All the really
black magic happens inside it.  Nobody understands all of this
code; a few people have managed to comprehend individual pieces of
it.

=== Export stage ===

Most of the export third stage is relatively easy to understand.
It takes the annotated DAG produced by the second stage and emits either a
fast-import stream or a DOT representation of the DAG.

The exception is the actual delta resolution done ny the call to
generate(), which is seriously hairy. Fortunately, that part of the
CVS master format has (unlike the header and attribute information)
been extremely stable, and thus the delta-integration code is unlikely
to require modification.

You will probably find that only part of the export code proper that
is seriously hairy is the use of iterators and probabilistic Bloom
filtering in compute_parent_links(). This hair is justified by the
fact that it optimizes what used to be an O(n**3) operation (and the
worst hotspot in the code) into about O(n).

The main challenge of this code is comprehending the data
structures it consumes.  That's our next topic.

== Data structures ==

This program is rife with tricky data structures. If you want to
modify it, the first thing you should do is read the definitions
in cvs.h.

The first stage turns each CVS file into a rev_list - a linked list of
rev_ref objects, each of which represents a named CVS branch head. The
rev_ref objects in turn point at chains of CVS commits, each
representing a CVS delta.

During the resolution phase, the branch structures associated with
individual files are transformed into a single rev_list object
representing a commit DAG. At this point, the commit pointers change
semantics to refer to git_commit objects; a certain amount of type
punning is involved.

The export code walks the resulting single revlist generating a
report from it.

A notable feature of the git_commit structures is that the code goes
to great lengths to space-optimize (pack) the representation of file
paths in the commit at the point when it is synthesized (this is
required in order to hold down the program's working-set size on large
repositories).  After packing, paths are represented by structure
trees that coalesce common path prefixes.

The 'refcount' field in the commit structure counts the number of branch
heads from which the commit can be reached by an ancestry chain.

== Source flles ==

=== atom.c  ===

The main entry point, atom(), interns a string, avoiding having
separate storage for duplicate copies. No ties to other structures.
The only complexity here is a straightforward hash implementation to
speed up collision searches.

=== authormap.c ===

Manages a map from short CVS-syle names to DVCS-style name/email
pairs. Added by ESR, it has few ties to the core code.

=== cvsnumber.c ===

Various small functions (mostly predicates) on the cvs_number objects 
that represent CVS revision numbers (1.1, 1.2, 2.1.3.1 and the like).
No coupling to other structures.

=== cvsutil.c  ===

Code for managing and freeing objects in a CVS file structure.
No coupling to revlist handling.

=== dump.c ===

Dump functions for graphing and debug instrumentation.
Much of the code in here is obsolete and unused.

=== export.c ===

Code to dump a resolved DAG as a git-fast-export stream.  Replaces
much more obscure code in Keith's original that built git repos
directly by calling the git CLI. The only coupling to the core 
data structures is that it traverses the DAG created by the resolution
stage.

=== generate.c  ===

Convert the sequence of deltas in a CVS master to a corresponding
sequence of file snapshots. This is the part of the export stage
most likely to make your brain hurt.

=== gram.y  ===

A fairly straightforward yacc grammar for CVS masters.  Fills a
cvs_file structure passed into it as a yyparse() argument.

=== graph.c  ===

Like export.c, but emits DOT rather than a fast-export stream.  Takes
the DAG generated by the analysis stage and turns it into a
description of the graph in the DOT markup language used by the
graphviz tools.

=== import.c ===

Import/analysis of a collection of CVS master files.  Calls the parser
and builds the first-stage revlist. The complicated part is in the 
rev_list_cvs() call, which calls out to revcvs.c.

In the first-stage revlist, each element corresponds to a CVS master
and points at a list of named CVS branch heads (rev_refs) in the
master, each one of which points at a list of CVS commit structures
(cvs_commit).

=== lex.l  ===

The lexical analyzer for the grammar in gram.y.  Pretty straightforward.

=== main.c  ===

The main sequence of the code.  Not much else there other than some
fairly simple time and date handling.

=== nodehash.c  ===

Manage the node hash, an obscure bit of internals used to walk
through all deltas of a CVS master at the point in the export stage
where snapshot blobs corresponding to the deltas are generated.

=== rbtree.c  ===

This is an optimization hack to speed up CVS symbol lookup, added
well after the main body of the code was written and decoupled
from the core data structures.

=== revcvs.c  ===

Black magic begins here.  Build the in-core revision list
corresponding to a single CVS master.  Just one entry point,
rev_list_cvs(), which takes the structure built by the grammar parse
of the master as its single argument.

Nobody fully understands the data structures this builds.  Murky areas
include the role of the topological sort and the handling of vendor
branches.

=== revdir.c  ===

The least incomprehensible part of the core code.  These functions are
used to pack file paths in rev_file objects into a more
space-efficient representation.

=== revlist.c  ===

Black magic continues here.  Core code used in analysis and resolution.
Nobody understands this either. The main function (and the least
comprehensible) is rev_branch_merge().  Which is, alas, the
algorithmic heart of the entire program.

=== tags.c  ===

Manage objects representing CVS tags (and later, git lightweight
tags). These data structures reference and are referenced by the
core structures, but the coupling is relatively loose and
well-defined; you can figure out what is going on by reading
the function names.

=== utils.c  ===

The progress meter, various private memory allocators, and
error-reporting.  No coupling to the core data structures.

== Known problems in the code ==

cvs-fast-export appears to treat any symbol pointing at a branch head 
as a branch name. It is unclear what it does if a branch head is
multiply tagged.

There's a comment in rev_list_merge() that says "Yes, this is
currently very inefficient".  That is a probable hotspot.

The fact that nobody really understands the resolution algorithm is
worrying.  It means nobody has much hope of fixing it where it breaks.

Various mysterious error messages need to be documented.  Basically,
if it's not in the list on cvs-fast-export.asc, it needs to be.

== Good practice ==

When modifying this code, run the regression tests (make check) early
and often.  It is very easy to break even with apparently innocuous 
changes.

If you find a bug and fix it, please try to create a toy repo exhibiting
the problem - or, better yet, a minimal set of operations to reproduce
it. Then add that to the regression tests.

Likewise, when adding a feature, add a test for it as well.

If you figure out something about the code that isn't documented here
- or, especially, if it's documented wrongly - please include an
explanation with your patch.
