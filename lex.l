%{
/*
 *  Copyright Â© 2006 Keith Packard <keithp@keithp.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or (at
 *  your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.
 */
#include "cvs.h"
#include "y.tab.h"
    
static char *
parse_data(void);
static void
parse_text(cvs_text *text);
static char *
parse_data_until_newline(void);

static void fast_export_sanitize(void);

#define YY_INPUT(buf,result,max_size) { \
    int c = getc(yyin); \
    result = (c == EOF) ? YY_NULL : (buf[0] = c, 1); \
}
    
%}
%s CONTENT SKIP COMMIT PERM REVISION FNAME SKIPTOSEMI AUTHORSS
%%
<INITIAL>head			BEGIN(CONTENT); return HEAD;
<INITIAL>branch			BEGIN(CONTENT); return BRANCH;
<INITIAL>access			BEGIN(CONTENT); return ACCESS;
<INITIAL>symbols		BEGIN(CONTENT); return SYMBOLS;
<INITIAL>locks			BEGIN(CONTENT); return LOCKS;
<INITIAL>comment		BEGIN(CONTENT); return COMMENT;
<INITIAL>expand			BEGIN(CONTENT); return EXPAND;
<INITIAL>date			BEGIN(CONTENT); return DATE;
<INITIAL>branches		BEGIN(CONTENT); return BRANCHES;
<INITIAL>next			BEGIN(CONTENT); return NEXT;
<INITIAL>commitid		BEGIN(COMMIT); return COMMITID;
<INITIAL>strict			BEGIN(CONTENT); return STRICT;
<INITIAL>author			BEGIN(AUTHORSS); return AUTHOR;
<INITIAL>state			BEGIN(CONTENT); return STATE;
<INITIAL>deltatype		BEGIN(CONTENT); return DELTATYPE;
<INITIAL>group			BEGIN(PERM); return GROUP;
<INITIAL>kopt			BEGIN(SKIPTOSEMI); return KOPT;
<INITIAL>owner			BEGIN(PERM); return OWNER;
<INITIAL>permissions		BEGIN(PERM); return PERMISSIONS;
<INITIAL>filename		BEGIN(FNAME); return FILENAME;
<INITIAL>mergepoint1		BEGIN(REVISION); return MERGEPOINT;
<INITIAL>hardlinks		BEGIN(SKIPTOSEMI); return HARDLINKS;
<INITIAL>desc			return DESC;
<INITIAL>log			return LOG;
<INITIAL>text			BEGIN(SKIP); return TEXT;
<SKIP>@				{
					parse_text(&yylval.text);
					BEGIN(INITIAL);
					return TEXT_DATA;
				}
<CONTENT>[-a-zA-Z_+%][-a-zA-Z_0-9+/%=.~^\\*?#!\[\]()<>]* {
					fast_export_sanitize();
					yylval.s = atom(yytext);
					return NAME;
				}
<AUTHORSS>[-a-zA-Z_0-9+%][-a-zA-Z_0-9+/%=.~^\\*?]* {
					fast_export_sanitize();
					yylval.s = atom(yytext);
					return NAME;
				}
<PERM>[0-9]+ {
					yylval.s = atom(yytext);
					return NAME;
				}
<COMMIT>[0-9a-zA-Z]+		{
					yylval.s = atom(yytext);
					return NAME;
				}
<REVISION>[0-9]+\.[0-9.]*			{
					yylval.number = lex_number(yytext);
					return NUMBER;
				}
<FNAME>[^;]* {
	yylval.s = atom(yytext);
	return NAME;
}
[0-9]+\.[0-9.]*			{
					yylval.number = lex_number(yytext);
					return NUMBER;
				}
;				BEGIN(INITIAL); return SEMI;
:				return COLON;
<SKIPTOSEMI>[^;]*		{
					yylval.s = parse_data_until_newline();
					return DATA;
				}
<INITIAL,CONTENT>@		{
					yylval.s = parse_data();
					return DATA;
				}
" " 				;
\t				;
\n				;
1				return BRAINDAMAGED_NUMBER;
.				{ 
				    fprintf(stderr, "%s: (%d) ignoring %c\n", 
					yyfilename, yylineno,
					yytext[0]);
				}
%%
int yywrap(void) { return 1; }

/*
 * A variable-length buffer, allocated on the stack first
 * but can grow to use the heap.
 */
struct varbuf {
	int max, cur;
	char *string;
	char buf[1024];
};

static void varbuf_init(struct varbuf *buf)
{
	buf->max = sizeof buf->buf;
	buf->cur = 0;
	buf->string = buf->buf;
}

static void varbuf_add(struct varbuf *buf, char c)
{
	if (buf->cur == buf->max) {
	    if (buf->string == buf->buf) {
		buf->max *= 2;
		buf->string = xmalloc(buf->max, __func__);
		memcpy(buf->string, buf->buf, buf->cur);
	    } else {
		buf->max *= 2;
		buf->string = xrealloc(buf->string, buf->max, __func__);
	    }
	}
	buf->string[buf->cur++] = c;
}

static void varbuf_free(struct varbuf *buf) {
	if (buf->string != buf->buf) {
	    free(buf->string);
	}
}

static char *
parse_data()
{
    int c;
    char *ret;
    struct varbuf buf;

    varbuf_init(&buf);

    for(;;) {
	c = getc(yyin);
	if (c == '@') {
	    c = getc (yyin);
	    if (c != '@') 
		break;
	}
	varbuf_add(&buf, c);
    }
    ungetc(c, yyin);
    varbuf_add(&buf, '\0');
    ret = atom(buf.string);
    varbuf_free(&buf);
    return ret;
}

static void
parse_text(cvs_text *text)
{
    int c;
    size_t length;

    text->filename = atom(yyfilename);
    text->offset = ftell(yyin) - 1;
    length = 1;

    while ((c = getc(yyin)) != EOF) {
	++length;
        if (c == '@') {
	    /* lookahead to see if we hit @@ */
	    c = getc(yyin);
	    if (c == '@') {
	        ++length;
	    } else {
		/* We consume only the closing single @,
		 * leaving it included in the length */
	        ungetc(c, yyin);
		break;
	    }
	}
    }
    text->length = length;
}

static char *
parse_data_until_newline(void)
{
    int c;
    char *ret;
    struct varbuf buf;

    varbuf_init(&buf);
    for(;;) {
	c = getc(yyin);
	if (c == '\n') {
		break;
	}
	varbuf_add(&buf, c);
    }
    ungetc(c, yyin);
    varbuf_add(&buf, '\0');
    ret = atom(buf.string);
    varbuf_free(&buf);
    return ret;
}

cvs_number
lex_number(char *s)
{
    cvs_number	n;
    char	*next;

    n.c = 0;
    while (*s) {
	n.n[n.c] = (int)strtol(s, &next, 10);
	if (next == s)
	    break;
	if (*next == '.')
	    next++;
	s = next;
	if (n.c > CVS_MAX_DEPTH)
	    fatal_error("revision too long, increase CVS_MAX_DEPTH");
	n.c++;
    }
    return n;
}

cvstime_t
lex_date(cvs_number *n)
{
	struct tm	tm;
	time_t		d;
	
	tm.tm_year = n->n[0];
	if (tm.tm_year > 1900)
	   tm.tm_year -= 1900;
	tm.tm_mon = n->n[1] - 1;
	tm.tm_mday = n->n[2];
	tm.tm_hour = n->n[3];
	tm.tm_min = n->n[4];
	tm.tm_sec = n->n[5];
	tm.tm_isdst = 0;
	#ifndef __CYGWIN__
	tm.tm_zone = 0;
	#endif
	d = mktime(&tm);
	if (d == 0) {
	    int i;
	    fprintf(stderr, "%s: (%d) unparsable date: ", yyfilename, yylineno);
	    for (i = 0; i < n->c; i++) {
		if (i) fprintf(stderr, ".");
		fprintf(stderr, "%d", n->n[i]);
	    }
	    fprintf(stderr, "\n");
	}
	if (d < RCS_EPOCH)
	    fatal_error("%s: (%d) date before RCS epoch: ", yyfilename,
		     yylineno);
	else if (d >= RCS_OMEGA)
	    fatal_error("%s: (%d) date too far in future: ", yyfilename,
		     yylineno);
	return d - RCS_EPOCH;
}

static void fast_export_sanitize(void)
{
    char *sp, *tp;

#define SUFFIX(a, s)	(strcmp(a + strlen(a) - strlen(s), s) == 0) 
#define BADCHARS	"~^\\*?"
    for (sp = tp = yytext; *sp; sp++) {
	if (isgraph((unsigned char)*sp) && strchr(BADCHARS, *sp) == NULL) {
	    *tp++ = *sp;
	    if (SUFFIX(yytext, "@{") || SUFFIX(yytext, "..")) {
		fatal_error("%s: (%d) tag or branch name %s is ill-formed.\n", 
			    yyfilename, yylineno, yytext);
	    }
	}
    }
    *tp = '\0';
    if (strlen(yytext) == 0) {
	fatal_error("%s: (%d) tag or branch name was empty after sanitization.\n", 
		    yyfilename, yylineno);
    }
}

char *
lex_text(void)
{
    return yytext;
}
